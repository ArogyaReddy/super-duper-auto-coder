#!/usr/bin/env node
/**
 * üö® CRITICAL SBS COMPLIANCE FIXER
 * 
 * This script automatically fixes all generated artifacts to match SBS_Automation patterns
 * Based on the prompts and compliance report analysis
 */

const fs = require('fs');
const path = require('path');

class SBSComplianceFixer {
    constructor() {
        this.sbsPath = './SBS_Automation';
        this.fixedCount = 0;
        this.errorCount = 0;
    }

    /**
     * Fix all SBS compliance issues in generated artifacts
     */
    async fixAllCompliance() {
        console.log('üîß Starting SBS compliance fixes...');
        
        // Fix feature files
        await this.fixFeatureFiles();
        
        // Fix step definition files
        await this.fixStepFiles();
        
        // Fix page object files
        await this.fixPageFiles();
        
        console.log(`‚úÖ Compliance fixes complete: ${this.fixedCount} files fixed, ${this.errorCount} errors`);
    }

    /**
     * Fix feature files to include proper SBS team tags
     */
    async fixFeatureFiles() {
        console.log('üéØ Fixing feature files...');
        
        const featuresDir = path.join(this.sbsPath, 'features');
        if (!fs.existsSync(featuresDir)) return;
        
        const featureFiles = fs.readdirSync(featuresDir)
            .filter(file => file.endsWith('.feature'));
            
        for (const file of featureFiles) {
            try {
                const filePath = path.join(featuresDir, file);
                let content = fs.readFileSync(filePath, 'utf8');
                let modified = false;
                
                // Add Team tag if missing
                if (!content.includes('@Team:')) {
                    content = `@Team:SBSBusinessContinuity
@jira=AUTO-${Date.now()}
@parentSuite:AutoGenerated
@regression @critical
${content}`;
                    modified = true;
                }
                
                // Fix wrong team tags
                if (content.includes('@Team:AutoCoder') || content.includes('@Team:SBS')) {
                    content = content.replace(/@Team:(AutoCoder|SBS)/g, '@Team:SBSBusinessContinuity');
                    modified = true;
                }
                
                if (modified) {
                    fs.writeFileSync(filePath, content);
                    this.fixedCount++;
                    console.log(`  ‚úÖ Fixed ${file}`);
                }
            } catch (error) {
                console.error(`  ‚ùå Error fixing ${file}:`, error.message);
                this.errorCount++;
            }
        }
    }

    /**
     * Fix step definition files to include proper imports and patterns
     */
    async fixStepFiles() {
        console.log('üîß Fixing step definition files...');
        
        const stepsDir = path.join(this.sbsPath, 'steps');
        if (!fs.existsSync(stepsDir)) return;
        
        const stepFiles = fs.readdirSync(stepsDir)
            .filter(file => file.endsWith('.js'));
            
        for (const file of stepFiles) {
            try {
                const filePath = path.join(stepsDir, file);
                let content = fs.readFileSync(filePath, 'utf8');
                let modified = false;
                
                // Add missing Cucumber imports
                if (!content.includes("const { When, Then, Given } = require('@cucumber/cucumber');")) {
                    content = `const { When, Then, Given } = require('@cucumber/cucumber');
const { assert } = require('chai');
${content}`;
                    modified = true;
                }
                
                // Add missing chai imports
                if (!content.includes("const { assert } = require('chai');") && 
                    !content.includes("const { When, Then, Given } = require('@cucumber/cucumber');")) {
                    content = `const { assert } = require('chai');
${content}`;
                    modified = true;
                }
                
                // Fix page import paths
                content = content.replace(/require\('\.\.\/pages\//g, "require('../../pages/common/");
                content = content.replace(/require\('\.\.\.\/pages\//g, "require('../../pages/common/");
                
                if (modified) {
                    fs.writeFileSync(filePath, content);
                    this.fixedCount++;
                    console.log(`  ‚úÖ Fixed ${file}`);
                }
            } catch (error) {
                console.error(`  ‚ùå Error fixing ${file}:`, error.message);
                this.errorCount++;
            }
        }
    }

    /**
     * Fix page object files to include proper imports and patterns
     */
    async fixPageFiles() {
        console.log('üìÑ Fixing page object files...');
        
        const pagesDir = path.join(this.sbsPath, 'pages');
        if (!fs.existsSync(pagesDir)) return;
        
        await this.fixPageDirectory(pagesDir);
    }

    async fixPageDirectory(dir) {
        const items = fs.readdirSync(dir);
        
        for (const item of items) {
            const itemPath = path.join(dir, item);
            const stat = fs.statSync(itemPath);
            
            if (stat.isDirectory()) {
                await this.fixPageDirectory(itemPath);
            } else if (item.endsWith('.js')) {
                try {
                    let content = fs.readFileSync(itemPath, 'utf8');
                    let modified = false;
                    
                    // Add missing By.js import
                    if (!content.includes("const By = require('./../../support/By.js');")) {
                        content = `const By = require('./../../support/By.js');
${content}`;
                        modified = true;
                    }
                    
                    // Add missing BasePage import
                    if (!content.includes("let BasePage = require('../common/base-page');")) {
                        content = content.replace("const By = require('./../../support/By.js');", 
                            `const By = require('./../../support/By.js');
let BasePage = require('../common/base-page');`);
                        modified = true;
                    }
                    
                    // Fix data-cy to data-test-id
                    content = content.replace(/data-cy=/g, 'data-test-id=');
                    
                    // Fix constructor pattern
                    if (content.includes('class ') && !content.includes('constructor(page)')) {
                        content = content.replace(
                            /class (\w+) extends BasePage\s*\{/g,
                            `class $1 extends BasePage {
  constructor(page) {
    super(page);
    this.page = page;
  }`
                        );
                        modified = true;
                    }
                    
                    if (modified) {
                        fs.writeFileSync(itemPath, content);
                        this.fixedCount++;
                        console.log(`  ‚úÖ Fixed ${item}`);
                    }
                } catch (error) {
                    console.error(`  ‚ùå Error fixing ${item}:`, error.message);
                    this.errorCount++;
                }
            }
        }
    }
}

// Run the fixer
const fixer = new SBSComplianceFixer();
fixer.fixAllCompliance().then(() => {
    console.log('üéØ SBS compliance fixes complete!');
    process.exit(0);
}).catch(error => {
    console.error('‚ùå Critical error:', error);
    process.exit(1);
});
