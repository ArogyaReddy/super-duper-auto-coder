{{!-- Playwright E2E Test Template with Inheritance --}}
{{extend "base-test-base"}}!-- Playwright Test Template with Inheritance --}}
{{extend "test-base"}}

{{#override imports "replace"}}
import { test, expect } from '@playwright/test';
{{#if features.pageObjects}}
import { {{pageObjectName}} } from '../pages/{{kebab-case pageObjectName}}.page';
{{/if}}
{{#if features.fixtures}}
import { {{fixtureNames}} } from '../fixtures/{{kebab-case featureName}}.fixtures';
{{/if}}
{{/override}}

{{#override setup "extend"}}
test.describe('{{featureName}} - Playwright E2E', () => {
    {{#block playwrightSetup}}
    test.beforeEach(async ({ page{{#if features.pageObjects}}, context{{/if}} }) => {
        {{#if features.pageObjects}}
        // Initialize page object
        const {{camelCase pageObjectName}} = new {{pageObjectName}}(page);
        {{/if}}
        
        {{#if theme.styles.verboseLogging}}
        console.log('ðŸŽ­ Starting Playwright test: {{featureName}}');
        {{/if}}
        
        {{#if baseUrl}}
        // Navigate to base URL
        await page.goto('{{baseUrl}}');
        {{/if}}
    });
    {{/block}}
{{/override}}

{{#override content "replace"}}
    {{#each scenarios}}
    test('{{this.title}}', async ({ page{{#if ../features.pageObjects}}, context{{/if}} }) => {
        {{#if ../features.pageObjects}}
        const {{camelCase ../pageObjectName}} = new {{../pageObjectName}}(page);
        {{/if}}
        
        {{#block playwrightSteps}}
        {{#each this.steps}}
        // Step: {{this.text}}
        {{#if this.action.type "click"}}
        await page.click('{{this.selector}}');
        {{else if this.action.type "fill"}}
        await page.fill('{{this.selector}}', '{{this.value}}');
        {{else if this.action.type "navigate"}}
        await page.goto('{{this.url}}');
        {{else if this.action.type "wait"}}
        await page.waitForSelector('{{this.selector}}');
        {{else}}
        // TODO: Implement {{this.action.type}} action
        {{/if}}
        
        {{#if ../theme.styles.screenshots}}
        // Take screenshot for step: {{this.text}}
        await page.screenshot({ 
            path: `screenshots/{{../featureName}}-step-{{@index}}.png`,
            fullPage: true 
        });
        {{/if}}
        {{/each}}
        {{/block}}
        
        {{#block playwrightAssertions}}
        {{#each this.assertions}}
        {{#if this.type "visible"}}
        await expect(page.locator('{{this.selector}}')).toBeVisible();
        {{else if this.type "text"}}
        await expect(page.locator('{{this.selector}}')).toHaveText('{{this.expected}}');
        {{else if this.type "url"}}
        await expect(page).toHaveURL('{{this.expected}}');
        {{else if this.type "title"}}
        await expect(page).toHaveTitle(/{{this.expected}}/);
        {{else}}
        // TODO: Implement {{this.type}} assertion
        {{/if}}
        {{/each}}
        {{/block}}
        
        {{#if theme.styles.finalScreenshot}}
        // Final screenshot
        await page.screenshot({ 
            path: `screenshots/{{featureName}}-final.png`,
            fullPage: true 
        });
        {{/if}}
    });
    {{/each}}
{{/override}}

{{#override teardown "extend"}}
    {{#block playwrightTeardown}}
    test.afterEach(async ({ page }) => {
        {{#if theme.styles.verboseLogging}}
        console.log('ðŸ§¹ Cleaning up Playwright test: {{featureName}}');
        {{/if}}
        
        {{#if features.videoRecording}}
        // Close context to save video
        await page.context().close();
        {{/if}}
    });
    {{/block}}
{{/override}}

{{#override helpers "append"}}
{{#block playwrightHelpers}}
// Playwright-specific helper functions
async function waitForElementAndClick(page, selector, timeout = 5000) {
    await page.waitForSelector(selector, { timeout });
    await page.click(selector);
}

async function fillFormField(page, selector, value) {
    await page.waitForSelector(selector);
    await page.fill(selector, '');
    await page.fill(selector, value);
}

async function verifyPageTitle(page, expectedTitle) {
    await expect(page).toHaveTitle(new RegExp(expectedTitle, 'i'));
}

{{#if features.pageObjects}}
// Page object helper
function createPageObject(PageClass, page) {
    return new PageClass(page);
}
{{/if}}
{{/block}}
{{/override}}
