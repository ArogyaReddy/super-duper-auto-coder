const { Given, When, Then } = require('@cucumber/cucumber');
const { expect } = require('playwright/test');
const {{className}} = require('../pages/{{kebabCase className}}');
const commonHelpers = require('../support/common-helpers');

/**
 * AutoCoder Generated Step Definitions - {{featureName}}
 * Framework: SBS_Automation
 * Generated: {{timestamp}}
 */

const {{camelCase className}} = new {{className}}();

{{#each stepDefinitions}}
{{this}}

{{/each}}

// Authentication Steps - Standard Pattern
Given('I am authenticated in the system', async function () {
    await this.page.goto(process.env.BASE_URL || 'https://app.sbs.com');
    await {{camelCase className}}.authenticateUser();
    await commonHelpers.waitForPageLoad(this.page);
});

Given('the application is ready for testing', async function () {
    await {{camelCase className}}.verifyApplicationReady();
    await commonHelpers.clearBrowserData(this.page);
});

// Navigation Steps - SBS Pattern
When('I navigate to the {{domain}} section', async function () {
    await {{camelCase className}}.navigateToSection();
    await {{camelCase className}}.waitForSectionLoad();
});

// Action Steps - SBS Pattern
When('I {{primaryAction}} {{primaryEntity}}', async function () {
    await {{camelCase className}}.{{methodName}}();
    await {{camelCase className}}.waitForActionComplete();
});

// Verification Steps - SBS Pattern
Then('the {{primaryEntity}} should be successfully {{expectedOutcome}}', async function () {
    const result = await {{camelCase className}}.verify{{pascalCase primaryEntity}}Status();
    expect(result).toBe(true);
});

Then('the system displays confirmation message', async function () {
    await {{camelCase className}}.verifySuccessMessage();
    await commonHelpers.takeScreenshot(this.page, '{{kebabCase featureName}}-success');
});

// Error Handling Steps - SBS Pattern
Then('the system should display appropriate error message', async function () {
    await {{camelCase className}}.verifyErrorHandling();
});
