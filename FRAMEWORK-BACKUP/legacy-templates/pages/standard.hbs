const { expect } = require('playwright/test');
const basePage = require('./base-page');

/**
 * AutoCoder Generated Page Object - {{className}}
 * Framework: SBS_Automation
 * Domain: {{domain}}
 * Generated: {{timestamp}}
 */

class {{className}} extends basePage {
    constructor() {
        super();
        this.pageUrl = process.env.BASE_URL + '/{{kebabCase domain}}';
        this.pageTitle = '{{titleCase domain}}';
    }

    // Page Elements - SBS Locator Pattern (data-cy)
    get {{camelCase primaryEntity}}Section() {
        return this.page.locator('[data-cy="{{kebabCase primaryEntity}}-section"]');
    }

    get {{camelCase primaryAction}}Button() {
        return this.page.locator('[data-cy="{{kebabCase primaryAction}}-btn"]');
    }

    get {{camelCase primaryEntity}}Input() {
        return this.page.locator('[data-cy="{{kebabCase primaryEntity}}-input"]');
    }

    get confirmationModal() {
        return this.page.locator('[data-cy="confirmation-modal"]');
    }

    get successAlert() {
        return this.page.locator('[data-cy="success-alert"]');
    }

    get errorAlert() {
        return this.page.locator('[data-cy="error-alert"]');
    }

    get loadingSpinner() {
        return this.page.locator('[data-cy="loading-spinner"]');
    }

{{#each elements}}
    get {{this.name}}() {
        return this.page.locator('{{this.selector}}');
    }
{{/each}}

    // Authentication Methods - SBS Pattern
    async authenticateUser() {
        await this.navigateTo(this.pageUrl);
        await this.waitForPageLoad();
        await this.verifyAuthentication();
    }

    // Navigation Methods - SBS Pattern
    async navigateToSection() {
        await this.navigateTo(this.pageUrl);
        await this.waitForElementVisible(this.{{camelCase primaryEntity}}Section);
        await this.verifyPageTitle(this.pageTitle);
    }

    async waitForSectionLoad() {
        await this.waitForElementHidden(this.loadingSpinner);
        await this.waitForElementVisible(this.{{camelCase primaryEntity}}Section);
    }

    // Action Methods - SBS Pattern
    async {{methodName}}(data = {}) {
        try {
            await this.waitForElementClickable(this.{{camelCase primaryAction}}Button);
            
            if (data.{{camelCase primaryEntity}}) {
                await this.fillInput(this.{{camelCase primaryEntity}}Input, data.{{camelCase primaryEntity}});
            }
            
            await this.clickElement(this.{{camelCase primaryAction}}Button);
            await this.waitForActionComplete();
            
        } catch (error) {
            throw new Error(`Failed to {{primaryAction}} {{primaryEntity}}: ${error.message}`);
        }
    }

    async waitForActionComplete() {
        await this.waitForElementHidden(this.loadingSpinner);
        await this.waitForAnyElementVisible([this.successAlert, this.errorAlert]);
    }

    // Verification Methods - SBS Pattern
    async verify{{pascalCase primaryEntity}}Status() {
        const isSuccessVisible = await this.isElementVisible(this.successAlert);
        const isErrorVisible = await this.isElementVisible(this.errorAlert);
        
        if (isErrorVisible) {
            const errorText = await this.getElementText(this.errorAlert);
            throw new Error(`{{pascalCase primaryEntity}} action failed: ${errorText}`);
        }
        
        return isSuccessVisible;
    }

    async verifyApplicationReady() {
        await this.waitForPageLoad();
        await this.verifyElementVisible(this.{{camelCase primaryEntity}}Section);
    }

    async verifySuccessMessage() {
        await this.waitForElementVisible(this.successAlert);
        const message = await this.getElementText(this.successAlert);
        expect(message).toContain('success');
    }

    async verifyErrorHandling() {
        const isErrorVisible = await this.isElementVisible(this.errorAlert);
        expect(isErrorVisible).toBe(true);
    }

{{#each methods}}
    {{this}}
{{/each}}
}

module.exports = {{className}};
