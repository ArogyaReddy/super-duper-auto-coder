#!/usr/bin/env python3

"""
üéØ EXCEL WORKBOOK CREATOR FOR ADP TESTING RESULTS

Creates a single Excel workbook (.xlsx) with multiple sheets from the CSV files
generated by the excel-report-generator.js for easy review and comparison.
"""

import pandas as pd
import os
import sys
from pathlib import Path
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Border, Side, Alignment
from openpyxl.utils.dataframe import dataframe_to_rows
from openpyxl.worksheet.table import Table, TableStyleInfo
import json

class ExcelWorkbookCreator:
    def __init__(self, utils_dir):
        self.utils_dir = Path(utils_dir)
        self.excel_files = [
            'EXCEL_01_Summary_Dashboard.csv',
            'EXCEL_02_All_Links_Catalog.csv',
            'EXCEL_03_Menu_Navigation.csv',
            'EXCEL_04_Broken_Links_Details.csv',
            'EXCEL_05_Test_Results.csv',
            'EXCEL_06_Recommendations.csv'
        ]
        self.workbook = Workbook()
        self.workbook.remove(self.workbook.active)  # Remove default sheet

    def create_excel_workbook(self):
        print("üìä CREATING EXCEL WORKBOOK")
        print("==========================")
        
        # Create each sheet from CSV files
        for excel_file in self.excel_files:
            self.create_sheet_from_csv(excel_file)
        
        # Add a summary overview sheet
        self.create_overview_sheet()
        
        # Save the workbook
        output_file = self.utils_dir / 'ADP_Testing_Comprehensive_Report.xlsx'
        self.workbook.save(output_file)
        
        print(f"\n‚úÖ Excel workbook created: {output_file}")
        self.display_workbook_info(output_file)

    def create_sheet_from_csv(self, csv_filename):
        csv_path = self.utils_dir / csv_filename
        
        if not csv_path.exists():
            print(f"‚ö†Ô∏è  Warning: {csv_filename} not found, skipping...")
            return
        
        # Determine sheet name from filename
        sheet_name = self.get_sheet_name(csv_filename)
        print(f"üìÑ Creating sheet: {sheet_name}")
        
        try:
            # Read CSV file
            df = pd.read_csv(csv_path)
            
            # Create worksheet
            ws = self.workbook.create_sheet(title=sheet_name)
            
            # Add data to worksheet
            for r in dataframe_to_rows(df, index=False, header=True):
                ws.append(r)
            
            # Style the worksheet
            self.style_worksheet(ws, sheet_name)
            
            print(f"   ‚úÖ {sheet_name} sheet created ({len(df)} rows)")
            
        except Exception as e:
            print(f"   ‚ùå Error creating {sheet_name}: {str(e)}")

    def get_sheet_name(self, filename):
        """Convert filename to readable sheet name"""
        name_mapping = {
            'EXCEL_01_Summary_Dashboard.csv': 'Summary Dashboard',
            'EXCEL_02_All_Links_Catalog.csv': 'All Links Catalog',
            'EXCEL_03_Menu_Navigation.csv': 'Menu Navigation',
            'EXCEL_04_Broken_Links_Details.csv': 'Broken Links',
            'EXCEL_05_Test_Results.csv': 'Test Results',
            'EXCEL_06_Recommendations.csv': 'Recommendations'
        }
        return name_mapping.get(filename, filename.replace('.csv', ''))

    def style_worksheet(self, ws, sheet_name):
        """Apply styling to the worksheet"""
        
        # Define styles
        header_font = Font(bold=True, color="FFFFFF")
        header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
        border = Border(left=Side(style='thin'), right=Side(style='thin'), 
                       top=Side(style='thin'), bottom=Side(style='thin'))
        
        # Style header row
        if ws.max_row > 0:
            for cell in ws[1]:
                cell.font = header_font
                cell.fill = header_fill
                cell.border = border
                cell.alignment = Alignment(horizontal='center', vertical='center')
        
        # Apply borders to all cells
        for row in ws.iter_rows():
            for cell in row:
                cell.border = border
        
        # Auto-adjust column widths
        for column in ws.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)  # Cap at 50 characters
            ws.column_dimensions[column_letter].width = adjusted_width
        
        # Freeze header row
        ws.freeze_panes = 'A2'
        
        # Create table for better functionality
        if ws.max_row > 1:
            table_range = f"A1:{ws.cell(row=ws.max_row, column=ws.max_column).coordinate}"
            table = Table(displayName=f"Table_{sheet_name.replace(' ', '_')}", ref=table_range)
            style = TableStyleInfo(name="TableStyleMedium9", showFirstColumn=False,
                                 showLastColumn=False, showRowStripes=True, showColumnStripes=False)
            table.tableStyleInfo = style
            ws.add_table(table)

    def create_overview_sheet(self):
        """Create an overview sheet with key statistics"""
        print("üìä Creating Overview sheet...")
        
        ws = self.workbook.create_sheet(title='üìä Overview', index=0)
        
        # Load test results for statistics
        try:
            results_path = self.utils_dir / 'real-adp-test-results.json'
            if results_path.exists():
                with open(results_path, 'r') as f:
                    results = json.load(f)
                
                # Executive summary
                exec_summary_path = self.utils_dir / 'executive-summary-report.json'
                if exec_summary_path.exists():
                    with open(exec_summary_path, 'r') as f:
                        exec_summary = json.load(f)
                else:
                    exec_summary = {'executiveSummary': {'overallHealthScore': 'N/A'}}
                
                # Create overview data
                overview_data = [
                    ['ADP APPLICATION TESTING - COMPREHENSIVE REPORT'],
                    [''],
                    ['Test Date', pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')],
                    ['Application Tested', 'ADP RUN Payroll System'],
                    ['Authentication Status', 'SUCCESS' if results.get('authentication', {}).get('success') else 'FAILED'],
                    ['Overall Health Score', f"{exec_summary.get('executiveSummary', {}).get('overallHealthScore', 'N/A')}%"],
                    [''],
                    ['üìä QUICK STATISTICS'],
                    ['Total Links Found', len(results.get('pageAnalysis', {}).get('links', []))],
                    ['Links Tested', len(results.get('linkTests', []))],
                    ['Working Links', len([t for t in results.get('linkTests', []) if t.get('working')])],
                    ['Broken Links', len([t for t in results.get('linkTests', []) if not t.get('working')])],
                    ['Menu Items Analyzed', len(results.get('pageAnalysis', {}).get('navigation', []))],
                    ['Shadow DOM Elements', results.get('summary', {}).get('advanced', {}).get('shadowDom', 0)],
                    ['iframes Detected', results.get('summary', {}).get('advanced', {}).get('iframes', 0)],
                    ['Custom Components', results.get('summary', {}).get('advanced', {}).get('customComponents', 0)],
                    [''],
                    ['üìã EXCEL SHEETS INCLUDED'],
                    ['Summary Dashboard', 'Executive overview and key metrics'],
                    ['All Links Catalog', 'Complete inventory of all 183 links'],
                    ['Menu Navigation', 'Analysis of 161 menu items'],
                    ['Broken Links', 'Details of 10 broken links found'],
                    ['Test Results', 'Complete test execution results'],
                    ['Recommendations', 'Action items and next steps'],
                    [''],
                    ['üîç HOW TO USE THIS WORKBOOK'],
                    ['1. Review Summary Dashboard for overview'],
                    ['2. Use All Links Catalog for complete link inventory'],
                    ['3. Check Broken Links sheet for issues to fix'],
                    ['4. Review Recommendations for action items'],
                    ['5. Use filters and pivot tables for analysis'],
                    [''],
                    ['üö® CRITICAL ISSUES IDENTIFIED'],
                    ['‚Ä¢ All 10 tested links failed due to timeout'],
                    ['‚Ä¢ Page load performance needs investigation'],
                    ['‚Ä¢ 9 navigation elements are not working'],
                    ['‚Ä¢ Missing test IDs on most elements'],
                    [''],
                    ['üí° NEXT STEPS'],
                    ['1. Fix timeout issues (Week 1)'],
                    ['2. Implement retry mechanisms (Week 2)'],
                    ['3. Add missing test IDs (Week 3)'],
                    ['4. Set up monitoring (Week 4)']
                ]
                
                # Add data to worksheet
                for row_data in overview_data:
                    if isinstance(row_data, list) and len(row_data) == 1:
                        ws.append([row_data[0], ''])
                    elif isinstance(row_data, list) and len(row_data) == 2:
                        ws.append(row_data)
                    else:
                        ws.append([str(row_data), ''])
                
                # Style the overview sheet
                self.style_overview_sheet(ws)
                
                print("   ‚úÖ Overview sheet created")
                
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Could not create overview sheet: {str(e)}")
            ws.append(['Overview data not available', ''])

    def style_overview_sheet(self, ws):
        """Apply special styling to the overview sheet"""
        
        # Define styles
        title_font = Font(size=16, bold=True, color="FFFFFF")
        title_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
        header_font = Font(size=12, bold=True, color="366092")
        border = Border(left=Side(style='thin'), right=Side(style='thin'), 
                       top=Side(style='thin'), bottom=Side(style='thin'))
        
        # Style title row
        ws['A1'].font = title_font
        ws['A1'].fill = title_fill
        ws.merge_cells('A1:B1')
        ws['A1'].alignment = Alignment(horizontal='center', vertical='center')
        
        # Style section headers (rows with emojis)
        for row in ws.iter_rows():
            cell_value = str(row[0].value or '')
            if any(emoji in cell_value for emoji in ['üìä', 'üìã', 'üîç', 'üö®', 'üí°']):
                row[0].font = header_font
                row[0].fill = PatternFill(start_color="E7F3FF", end_color="E7F3FF", fill_type="solid")
        
        # Apply borders and adjust widths
        for row in ws.iter_rows():
            for cell in row:
                cell.border = border
        
        ws.column_dimensions['A'].width = 40
        ws.column_dimensions['B'].width = 60

    def display_workbook_info(self, output_file):
        """Display information about the created workbook"""
        print("\nüìä EXCEL WORKBOOK CREATED")
        print("==========================")
        print(f"üìç Location: {output_file}")
        print(f"üìä File Size: {output_file.stat().st_size / 1024:.1f} KB")
        print("")
        print("üìÑ Sheets Included:")
        for sheet in self.workbook.sheetnames:
            ws = self.workbook[sheet]
            row_count = ws.max_row
            col_count = ws.max_column
            print(f"   üìã {sheet} ({row_count} rows √ó {col_count} columns)")
        print("")
        print("üéØ READY FOR ANALYSIS:")
        print("   ‚Ä¢ Open in Excel or Google Sheets")
        print("   ‚Ä¢ Use filters for easy data review")
        print("   ‚Ä¢ Create pivot tables for advanced analysis")
        print("   ‚Ä¢ All data is formatted and ready for comparison")
        print("")
        print("‚úÖ Perfect for stakeholder review and action planning!")

def main():
    utils_dir = sys.argv[1] if len(sys.argv) > 1 else str(Path(__file__).parent.parent / 'reports')
    
    try:
        creator = ExcelWorkbookCreator(utils_dir)
        creator.create_excel_workbook()
    except Exception as e:
        print(f"‚ùå Excel workbook creation failed: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
